package com.softengine.newschain.configuration;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;

import com.softengine.newschain.configuration.PreAuthTokenHeaderFilter;

@Configuration
@EnableWebSecurity
public class WebMvcSecurityConfig extends WebSecurityConfigurerAdapter {

	@Value("${app.header.name}")
	private String appHeaderName;

	@Value("${app.token}")
	private String appToken;

	private static final String[] AUTH_WHITELIST = { "/", "/v2/api-docs", "/swagger-resources", "/swagger-resources/**",
			"/configuration/ui", "/configuration/security", "/swagger-ui.html", "/webjars/**"};

	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
		PreAuthTokenHeaderFilter filter = new PreAuthTokenHeaderFilter(appHeaderName);

		filter.setAuthenticationManager(new AuthenticationManager() {
			@Override
			public Authentication authenticate(Authentication authentication) throws AuthenticationException {
				String principal = (String) authentication.getPrincipal();
				boolean isAuth = bCryptPasswordEncoder().matches(appToken, principal);
//				if (!isAuth) {
//					throw new BadCredentialsException("The API key was not found or not the expected value.");
//				}
				authentication.setAuthenticated(true);
				return authentication;
			}
		});
		
		httpSecurity.authorizeRequests().antMatchers(AUTH_WHITELIST).permitAll().antMatchers("/**").authenticated()
				.and().cors().and().csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()).disable().sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().addFilter(filter).authorizeRequests()
				.anyRequest().authenticated().and().exceptionHandling()
				.authenticationEntryPoint((request, response, e) -> {
					response.setStatus(HttpServletResponse.SC_FORBIDDEN);
					response.sendError(HttpStatus.FORBIDDEN.value(), "Bilgilerinizi kontrol ediniz.");
				});
	}

	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	
	public static void main(String[] args) {
		System.out.println(new BCryptPasswordEncoder().encode("SgkWomenUp!.SfmM"));;
	}
}
